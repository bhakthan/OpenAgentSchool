Implementing an intermediate-level Agentic Retrieval Augmented Generation system requires more sophisticated code. The core of this implementation is the agent's reasoning loop. Instead of a simple retrieve-then-generate sequence, the agent's code needs to support a multi-step process. This is often implemented as a state machine or a loop that continues until a certain condition is met, such as the agent determining it has a satisfactory answer. Within this loop, the agent's code will call a Large Language Model multiple times. First, to analyze and break down the user's query. Second, to generate search queries. Third, to evaluate the results of those searches. And finally, to synthesize the final answer. This requires more complex prompt engineering. You will need to design specific prompts for each of these steps. For example, a prompt to generate a search query might include instructions like "You are a world-class researcher. Generate a search query to find information about X." The implementation also needs to handle the state of the agent's investigation, including the original query, the search results found so far, and the agent's internal "thoughts" or chain of thought. This is often stored in a structured object that is passed from one step of the loop to the next. Using a framework like LangChain or LlamaIndex can simplify this, as they provide abstractions for building such agentic loops. The code will be more modular, with separate functions for each of the agent's capabilities, such as analyzing queries, searching documents, and synthesizing answers. This modularity is key to building a system that is both powerful and maintainable.