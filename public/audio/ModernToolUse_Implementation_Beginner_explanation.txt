Implementing Tool Use at a beginner level is focused on enabling a large language model to call a single, pre-defined function. The implementation relies heavily on the capabilities of the specific AI model and platform you are using, such as Azure OpenAI service, which has built-in features for function calling.

The first step is to define the tool you want the AI to use. In your code, this is typically a standard function. For example, you might write a Python function called get_stock_price that takes a stock ticker symbol as an argument and returns the current price by calling a financial data API.

The second, and most critical, step is to describe this function to the AI model. You cannot just give the model the code. You need to provide a clear, structured description of the tool in a format the model understands. This description, often in a JSON format, includes three key pieces of information. First, the name of the function, for example, get_stock_price. Second, a clear description of what the function does, such as, gets the current price of a stock. Third, a definition of the parameters the function expects, including their names, types, and a description. For our example, this would be a parameter named ticker_symbol of type string, described as the stock ticker symbol.

The third step is to make the actual call to the AI model. When you send your prompt to the model, like, what is the price of Microsoft stock, you also include the JSON description of the get_stock_price function in the API call. This is often passed in a special tools or functions parameter.

The AI model then does something remarkable. Instead of generating a text answer, it might respond with a special object indicating that it wants to call a tool. This response will contain the name of the function it wants to call, get_stock_price, and the arguments it has extracted from your prompt, for example, ticker_symbol equals MSFT.

The fourth and final step is to execute the function in your own code. Your code receives this tool-calling instruction from the AI. You then call your actual get_stock_price function with the argument MSFT. Once your function returns the price, you send this result back to the AI model in a new API call. The AI then uses this result to generate a final, user-friendly answer, such as, The current price of Microsoft stock is 350 dollars. This entire process allows your code to work in tandem with the AI's reasoning capabilities.
