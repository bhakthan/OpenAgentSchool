export interface QuizQuestion {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  category: string;
  subCategory: string;
  learningObjectives: string[];
  relatedConcepts: string[];
  persona: string[];
  timeEstimate: number; // in seconds
  codeExample?: string;
  visualAid?: string;
}

export interface QuizCategory {
  id: string;
  name: string;
  description: string;
  icon: string;
  subCategories: QuizSubCategory[];
  totalQuestions: number;
  estimatedTime: number;
}

export interface QuizSubCategory {
  id: string;
  name: string;
  description: string;
  questions: QuizQuestion[];
  prerequisites: string[];
}

export interface QuizSession {
  id: string;
  userId: string;
  categoryId: string;
  subCategoryId?: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  questions: QuizQuestion[];
  currentQuestionIndex: number;
  answers: Record<string, number>;
  score: number;
  startTime: Date;
  endTime?: Date;
  timeSpent: number;
  completed: boolean;
  feedback: QuizFeedback[];
}

export interface QuizFeedback {
  questionId: string;
  isCorrect: boolean;
  selectedAnswer: number;
  correctAnswer: number;
  explanation: string;
  improvementSuggestions: string[];
}

export interface UserPersona {
  id: string;
  name: string;
  description: string;
  targetDifficulty: 'beginner' | 'intermediate' | 'advanced';
  focusAreas: string[];
  learningStyle: 'visual' | 'hands-on' | 'theoretical' | 'mixed';
}

// User Personas
export const userPersonas: UserPersona[] = [
  {
    id: 'business-leader',
    name: 'Business Leader',
    description: 'Executives and managers who need to understand AI agent capabilities for strategic decisions',
    targetDifficulty: 'beginner',
    focusAreas: ['strategy', 'business-value', 'use-cases', 'roi'],
    learningStyle: 'visual'
  },
  {
    id: 'no-code-engineer',
    name: 'No-Code/Low-Code Engineer',
    description: 'Technical professionals who build solutions without extensive coding',
    targetDifficulty: 'beginner',
    focusAreas: ['configuration', 'integration', 'workflows', 'tools'],
    learningStyle: 'hands-on'
  },
  {
    id: 'agent-designer',
    name: 'Agent Designer',
    description: 'Professionals who design agent workflows and user experiences',
    targetDifficulty: 'intermediate',
    focusAreas: ['patterns', 'ux-design', 'workflows', 'communication'],
    learningStyle: 'mixed'
  },
  {
    id: 'agent-developer',
    name: 'Agent Developer',
    description: 'Developers who implement and customize AI agent solutions',
    targetDifficulty: 'intermediate',
    focusAreas: ['implementation', 'apis', 'integration', 'debugging'],
    learningStyle: 'hands-on'
  },
  {
    id: 'ai-enthusiast',
    name: 'AI Enthusiast',
    description: 'Technology enthusiasts exploring AI agent concepts and applications',
    targetDifficulty: 'intermediate',
    focusAreas: ['concepts', 'trends', 'experimentation', 'learning'],
    learningStyle: 'mixed'
  },
  {
    id: 'ai-engineer',
    name: 'AI Engineer',
    description: 'Engineers who build and optimize AI agent systems at scale',
    targetDifficulty: 'advanced',
    focusAreas: ['architecture', 'optimization', 'scalability', 'performance'],
    learningStyle: 'theoretical'
  },
  {
    id: 'agent-architect',
    name: 'Agent Architect',
    description: 'Architects who design complex multi-agent systems and infrastructures',
    targetDifficulty: 'advanced',
    focusAreas: ['system-design', 'architecture', 'patterns', 'protocols'],
    learningStyle: 'theoretical'
  },
  {
    id: 'ai-ops-engineer',
    name: 'AI Ops Engineer',
    description: 'Engineers who deploy, monitor, and maintain AI agent systems in production',
    targetDifficulty: 'advanced',
    focusAreas: ['deployment', 'monitoring', 'maintenance', 'security'],
    learningStyle: 'hands-on'
  }
];

// Quiz Categories
export const quizCategories: QuizCategory[] = [
  {
    id: 'core-concepts',
    name: 'Core Concepts',
    description: 'Fundamental AI agent concepts and principles',
    icon: 'Brain',
    totalQuestions: 45,
    estimatedTime: 25,
    subCategories: [
      {
        id: 'agents',
        name: 'AI Agents',
        description: 'Understanding AI agents, their components, and lifecycle',
        prerequisites: [],
        questions: [
          // Existing questions remain...
          // Add new questions for newly implemented features
          
          // AGENT PATTERNS - Voice Agent Pattern
          {
            id: 'patterns-voice-b1',
            question: 'What is the primary purpose of the Voice Agent pattern?',
            options: [
              'To create text-only agents',
              'To enable AI agents to interact through voice interfaces with speech recognition and synthesis',
              'To create visual agents only',
              'To eliminate user interfaces entirely'
            ],
            correctAnswer: 1,
            explanation: 'The Voice Agent pattern enables AI agents to interact through voice interfaces, incorporating speech recognition for input and text-to-speech for output, creating natural conversational experiences.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Understand voice agent basics', 'Recognize voice interaction benefits'],
            relatedConcepts: ['speech-recognition', 'text-to-speech', 'natural-interaction'],
            persona: ['business-leader', 'no-code-engineer', 'agent-designer'],
            timeEstimate: 30
          },
          {
            id: 'patterns-voice-i1',
            question: 'Which Azure services are commonly used to implement Voice Agent patterns?',
            options: [
              'Only Azure OpenAI',
              'Azure Speech Services, Azure OpenAI, and Azure Cognitive Services',
              'Only Azure Storage',
              'Only Azure Functions'
            ],
            correctAnswer: 1,
            explanation: 'Voice Agent patterns typically use Azure Speech Services for speech recognition and synthesis, Azure OpenAI for natural language processing, and Azure Cognitive Services for additional AI capabilities.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Identify Azure services for voice agents', 'Understand service integration'],
            relatedConcepts: ['azure-speech', 'service-integration', 'voice-pipeline'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 45
          },
          {
            id: 'patterns-voice-a1',
            question: 'What are the key considerations for implementing Voice Agent patterns in enterprise environments?',
            options: [
              'Only cost considerations',
              'Latency, privacy, multi-language support, noise handling, and security',
              'Only technical specifications',
              'Only user preferences'
            ],
            correctAnswer: 1,
            explanation: 'Enterprise Voice Agent implementations must consider latency for real-time interaction, privacy for sensitive data, multi-language support for global users, noise handling for various environments, and security for voice data protection.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Evaluate enterprise voice requirements', 'Design secure voice systems'],
            relatedConcepts: ['enterprise-requirements', 'voice-security', 'performance-optimization'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          },
          
          // AGENT PATTERNS - Computer Use Pattern
          {
            id: 'patterns-computer-b1',
            question: 'What does the Computer Use pattern enable AI agents to do?',
            options: [
              'Only process text data',
              'Interact with computer interfaces, click buttons, and manipulate UI elements',
              'Only read files',
              'Only send emails'
            ],
            correctAnswer: 1,
            explanation: 'The Computer Use pattern enables AI agents to interact with computer interfaces by clicking buttons, filling forms, navigating windows, and manipulating UI elements, essentially allowing agents to use software like humans do.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Understand computer use capabilities', 'Recognize UI automation benefits'],
            relatedConcepts: ['ui-automation', 'screen-interaction', 'human-like-interaction'],
            persona: ['business-leader', 'no-code-engineer', 'agent-designer'],
            timeEstimate: 35
          },
          {
            id: 'patterns-computer-i1',
            question: 'What technologies are typically used to implement Computer Use patterns?',
            options: [
              'Only keyboard inputs',
              'Screen capture, OCR, UI automation libraries, and vision models',
              'Only mouse clicks',
              'Only text processing'
            ],
            correctAnswer: 1,
            explanation: 'Computer Use patterns typically use screen capture for visual input, OCR for text recognition, UI automation libraries for interaction, and vision models for understanding screen content.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Identify computer use technologies', 'Understand implementation stack'],
            relatedConcepts: ['screen-capture', 'ocr', 'ui-automation', 'computer-vision'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 50
          },
          {
            id: 'patterns-computer-a1',
            question: 'How should Computer Use patterns handle security and access control in enterprise environments?',
            options: [
              'Allow unrestricted access',
              'Implement sandboxing, permission controls, audit logging, and secure credential management',
              'Only use basic passwords',
              'Disable all security features'
            ],
            correctAnswer: 1,
            explanation: 'Enterprise Computer Use patterns require sandboxing to isolate agent actions, permission controls to limit access, audit logging for compliance, and secure credential management for authentication.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Design secure computer use systems', 'Implement enterprise controls'],
            relatedConcepts: ['sandboxing', 'access-control', 'security-compliance', 'audit-logging'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          },
          
          // AGENT PATTERNS - Code Act Pattern
          {
            id: 'patterns-codeact-b1',
            question: 'What is the Code Act pattern in AI agent development?',
            options: [
              'Writing only documentation',
              'An agent pattern that enables agents to write, execute, and iterate on code to solve problems',
              'Only reading code',
              'Only testing existing code'
            ],
            correctAnswer: 1,
            explanation: 'The Code Act pattern enables AI agents to write, execute, and iterate on code to solve problems, combining reasoning with code generation and execution in a feedback loop.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Understand code act concept', 'Recognize code-based problem solving'],
            relatedConcepts: ['code-generation', 'code-execution', 'iterative-development'],
            persona: ['agent-developer', 'ai-enthusiast', 'agent-designer'],
            timeEstimate: 40
          },
          {
            id: 'patterns-codeact-i1',
            question: 'What safety measures should be implemented for Code Act patterns?',
            options: [
              'No safety measures needed',
              'Code sandboxing, execution timeouts, resource limits, and output validation',
              'Only basic error handling',
              'Only syntax checking'
            ],
            correctAnswer: 1,
            explanation: 'Code Act patterns require sandboxing to isolate code execution, timeouts to prevent infinite loops, resource limits to prevent system overload, and output validation to ensure safe results.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Implement code execution safety', 'Design secure code environments'],
            relatedConcepts: ['code-sandboxing', 'execution-safety', 'resource-management'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 55
          },
          {
            id: 'patterns-codeact-a1',
            question: 'How can Code Act patterns be optimized for complex software development tasks?',
            options: [
              'Only use simple scripts',
              'Implement code versioning, dependency management, testing frameworks, and collaborative development workflows',
              'Avoid all complexity',
              'Only use single-line commands'
            ],
            correctAnswer: 1,
            explanation: 'Advanced Code Act patterns can be optimized with code versioning for iteration tracking, dependency management for libraries, testing frameworks for validation, and collaborative workflows for team development.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Optimize code act for development', 'Implement advanced code workflows'],
            relatedConcepts: ['code-versioning', 'dependency-management', 'testing-frameworks', 'collaborative-development'],
            persona: ['ai-engineer', 'agent-architect', 'agent-developer'],
            timeEstimate: 70
          },
          
          // AGENT SECURITY
          {
            id: 'security-b1',
            question: 'Why is security important in AI agent systems?',
            options: [
              'It\'s not important for AI agents',
              'To protect against prompt injection, data breaches, and unauthorized access',
              'Only for compliance reasons',
              'Only for performance optimization'
            ],
            correctAnswer: 1,
            explanation: 'Security is crucial for AI agents to protect against prompt injection attacks, prevent data breaches, control unauthorized access, and ensure safe operation in production environments.',
            difficulty: 'beginner',
            category: 'agent-security',
            subCategory: 'security-fundamentals',
            learningObjectives: ['Understand agent security importance', 'Recognize security threats'],
            relatedConcepts: ['prompt-injection', 'data-protection', 'access-control'],
            persona: ['business-leader', 'agent-designer', 'ai-ops-engineer'],
            timeEstimate: 35
          },
          {
            id: 'security-i1',
            question: 'What are the main types of security threats to AI agent systems?',
            options: [
              'Only network attacks',
              'Prompt injection, data poisoning, adversarial inputs, and privilege escalation',
              'Only physical security',
              'Only software bugs'
            ],
            correctAnswer: 1,
            explanation: 'AI agent systems face threats including prompt injection (manipulating agent behavior), data poisoning (corrupting training data), adversarial inputs (crafted to fool models), and privilege escalation (gaining unauthorized access).',
            difficulty: 'intermediate',
            category: 'agent-security',
            subCategory: 'threat-analysis',
            learningObjectives: ['Identify security threats', 'Analyze attack vectors'],
            relatedConcepts: ['prompt-injection', 'data-poisoning', 'adversarial-attacks', 'privilege-escalation'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 50
          },
          {
            id: 'security-a1',
            question: 'How should enterprise AI agent systems implement defense-in-depth security?',
            options: [
              'Only use firewalls',
              'Implement input validation, output filtering, access controls, monitoring, and incident response',
              'Only use encryption',
              'Only use authentication'
            ],
            correctAnswer: 1,
            explanation: 'Defense-in-depth for AI agents includes input validation to prevent malicious inputs, output filtering to ensure safe responses, access controls for authorization, monitoring for threat detection, and incident response for security events.',
            difficulty: 'advanced',
            category: 'agent-security',
            subCategory: 'enterprise-security',
            learningObjectives: ['Design comprehensive security', 'Implement security layers'],
            relatedConcepts: ['defense-in-depth', 'input-validation', 'output-filtering', 'security-monitoring'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          },
          
          // AGENT ETHICS
          {
            id: 'ethics-b1',
            question: 'What are the main ethical considerations for AI agent development?',
            options: [
              'Only technical performance',
              'Fairness, transparency, accountability, and privacy protection',
              'Only cost efficiency',
              'Only speed of development'
            ],
            correctAnswer: 1,
            explanation: 'AI agent ethics involves ensuring fairness (avoiding bias), transparency (explainable decisions), accountability (clear responsibility), and privacy protection (data rights and confidentiality).',
            difficulty: 'beginner',
            category: 'agent-ethics',
            subCategory: 'ethical-principles',
            learningObjectives: ['Understand AI ethics principles', 'Recognize ethical responsibilities'],
            relatedConcepts: ['fairness', 'transparency', 'accountability', 'privacy'],
            persona: ['business-leader', 'agent-designer', 'ai-enthusiast'],
            timeEstimate: 40
          },
          {
            id: 'ethics-i1',
            question: 'How can AI agents be designed to avoid bias and ensure fairness?',
            options: [
              'Ignore bias completely',
              'Use diverse training data, implement bias testing, and regular audits',
              'Only use technical solutions',
              'Only rely on user feedback'
            ],
            correctAnswer: 1,
            explanation: 'Bias prevention requires diverse training data to represent all groups, bias testing to identify unfair outcomes, regular audits to monitor performance across demographics, and inclusive design processes.',
            difficulty: 'intermediate',
            category: 'agent-ethics',
            subCategory: 'bias-prevention',
            learningObjectives: ['Implement bias prevention', 'Design fair AI systems'],
            relatedConcepts: ['bias-testing', 'diverse-data', 'fairness-audits', 'inclusive-design'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 55
          },
          {
            id: 'ethics-a1',
            question: 'What governance frameworks should organizations implement for ethical AI agent deployment?',
            options: [
              'No governance needed',
              'Ethics committees, impact assessments, monitoring systems, and stakeholder engagement',
              'Only technical reviews',
              'Only legal compliance'
            ],
            correctAnswer: 1,
            explanation: 'Ethical AI governance requires ethics committees for oversight, impact assessments for risk evaluation, monitoring systems for ongoing compliance, and stakeholder engagement for inclusive decision-making.',
            difficulty: 'advanced',
            category: 'agent-ethics',
            subCategory: 'governance-frameworks',
            learningObjectives: ['Design ethical governance', 'Implement oversight systems'],
            relatedConcepts: ['ethics-committees', 'impact-assessment', 'ethical-monitoring', 'stakeholder-engagement'],
            persona: ['ai-engineer', 'agent-architect', 'business-leader'],
            timeEstimate: 65
          },
          
          // MULTI-AGENT SYSTEMS
          {
            id: 'multi-agent-b1',
            question: 'What is a multi-agent system?',
            options: [
              'A single AI agent',
              'A system where multiple AI agents work together to solve complex problems',
              'A database system',
              'A user interface'
            ],
            correctAnswer: 1,
            explanation: 'A multi-agent system consists of multiple AI agents that work together, each with specialized capabilities, to solve complex problems that are difficult for a single agent to handle.',
            difficulty: 'beginner',
            category: 'multi-agent-systems',
            subCategory: 'fundamentals',
            learningObjectives: ['Define multi-agent systems', 'Understand agent collaboration'],
            relatedConcepts: ['agent-coordination', 'distributed-intelligence', 'collaboration'],
            persona: ['business-leader', 'agent-designer', 'ai-enthusiast'],
            timeEstimate: 30
          },
          {
            id: 'multi-agent-i1',
            question: 'What are the key challenges in multi-agent system design?',
            options: [
              'Only network latency',
              'Coordination, communication, conflict resolution, and resource allocation',
              'Only storage requirements',
              'Only user interface design'
            ],
            correctAnswer: 1,
            explanation: 'Multi-agent systems face challenges in coordination (synchronizing actions), communication (message passing), conflict resolution (handling disagreements), and resource allocation (sharing computational resources).',
            difficulty: 'intermediate',
            category: 'multi-agent-systems',
            subCategory: 'design-challenges',
            learningObjectives: ['Identify multi-agent challenges', 'Understand system complexity'],
            relatedConcepts: ['agent-coordination', 'distributed-systems', 'resource-management'],
            persona: ['agent-developer', 'ai-engineer', 'agent-architect'],
            timeEstimate: 45
          },
          {
            id: 'multi-agent-a1',
            question: 'How can multi-agent systems be architected for fault tolerance and scalability?',
            options: [
              'Use only centralized control',
              'Implement redundancy, load balancing, graceful degradation, and horizontal scaling',
              'Only increase hardware',
              'Only use faster networks'
            ],
            correctAnswer: 1,
            explanation: 'Fault-tolerant multi-agent systems require redundancy (backup agents), load balancing (distributing work), graceful degradation (maintaining partial functionality), and horizontal scaling (adding more agents).',
            difficulty: 'advanced',
            category: 'multi-agent-systems',
            subCategory: 'architecture-patterns',
            learningObjectives: ['Design scalable multi-agent systems', 'Implement fault tolerance'],
            relatedConcepts: ['fault-tolerance', 'scalability', 'redundancy', 'load-balancing'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 70
          },
          
          // DATA VISUALIZATION FOR AGENTS
          {
            id: 'visualization-b1',
            question: 'Why is data visualization important for AI agent systems?',
            options: [
              'Only for aesthetic purposes',
              'To help users understand agent behavior, performance metrics, and decision-making processes',
              'Only for technical documentation',
              'Only for marketing materials'
            ],
            correctAnswer: 1,
            explanation: 'Data visualization helps users understand how agents behave, track performance metrics, visualize decision-making processes, and identify patterns in agent interactions and outcomes.',
            difficulty: 'beginner',
            category: 'data-visualization',
            subCategory: 'fundamentals',
            learningObjectives: ['Understand visualization importance', 'Recognize user needs'],
            relatedConcepts: ['user-understanding', 'performance-monitoring', 'decision-transparency'],
            persona: ['business-leader', 'agent-designer', 'no-code-engineer'],
            timeEstimate: 35
          },
          {
            id: 'visualization-i1',
            question: 'What types of visualizations are most effective for agent performance monitoring?',
            options: [
              'Only bar charts',
              'Dashboards, flow diagrams, performance metrics, and interaction timelines',
              'Only text reports',
              'Only static images'
            ],
            correctAnswer: 1,
            explanation: 'Effective agent visualization includes dashboards for real-time monitoring, flow diagrams for process understanding, performance metrics for optimization, and interaction timelines for behavior analysis.',
            difficulty: 'intermediate',
            category: 'data-visualization',
            subCategory: 'visualization-types',
            learningObjectives: ['Select appropriate visualizations', 'Design effective dashboards'],
            relatedConcepts: ['performance-dashboards', 'flow-visualization', 'metrics-display'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 50
          },
          {
            id: 'visualization-a1',
            question: 'How should real-time agent visualization systems be architected for high-volume environments?',
            options: [
              'Use only static charts',
              'Implement streaming data processing, efficient rendering, data aggregation, and progressive disclosure',
              'Only use basic HTML tables',
              'Only show summary statistics'
            ],
            correctAnswer: 1,
            explanation: 'High-volume visualization systems need streaming data processing for real-time updates, efficient rendering for performance, data aggregation for scalability, and progressive disclosure for usability.',
            difficulty: 'advanced',
            category: 'data-visualization',
            subCategory: 'real-time-systems',
            learningObjectives: ['Architect scalable visualization', 'Optimize rendering performance'],
            relatedConcepts: ['streaming-data', 'efficient-rendering', 'data-aggregation', 'progressive-disclosure'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          },
          
          // AGENT DEPLOYMENT
          {
            id: 'deployment-b1',
            question: 'What are the key considerations for deploying AI agents to production?',
            options: [
              'Only code quality',
              'Scalability, monitoring, security, and maintenance',
              'Only performance testing',
              'Only user acceptance'
            ],
            correctAnswer: 1,
            explanation: 'Production agent deployment requires scalability for handling load, monitoring for operational visibility, security for protection, and maintenance for ongoing updates and support.',
            difficulty: 'beginner',
            category: 'agent-deployment',
            subCategory: 'deployment-fundamentals',
            learningObjectives: ['Understand deployment requirements', 'Recognize production needs'],
            relatedConcepts: ['production-readiness', 'scalability', 'monitoring', 'security'],
            persona: ['business-leader', 'ai-ops-engineer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'deployment-i1',
            question: 'What Azure services are commonly used for AI agent deployment?',
            options: [
              'Only Azure VMs',
              'Azure Container Instances, Azure Kubernetes Service, Azure Functions, and Azure App Service',
              'Only Azure Storage',
              'Only Azure SQL Database'
            ],
            correctAnswer: 1,
            explanation: 'Azure offers multiple deployment options: Container Instances for simple containerized agents, Kubernetes Service for orchestrated deployments, Functions for serverless agents, and App Service for web-based agents.',
            difficulty: 'intermediate',
            category: 'agent-deployment',
            subCategory: 'azure-deployment',
            learningObjectives: ['Select deployment services', 'Understand Azure options'],
            relatedConcepts: ['containerization', 'orchestration', 'serverless', 'web-deployment'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 55
          },
          {
            id: 'deployment-a1',
            question: 'How should CI/CD pipelines be designed for AI agent deployments?',
            options: [
              'Only manual deployments',
              'Automated testing, model validation, gradual rollouts, and rollback capabilities',
              'Only code deployment',
              'Only documentation updates'
            ],
            correctAnswer: 1,
            explanation: 'AI agent CI/CD pipelines should include automated testing for functionality, model validation for performance, gradual rollouts for risk mitigation, and rollback capabilities for quick recovery.',
            difficulty: 'advanced',
            category: 'agent-deployment',
            subCategory: 'cicd-pipelines',
            learningObjectives: ['Design agent CI/CD', 'Implement deployment automation'],
            relatedConcepts: ['automated-testing', 'model-validation', 'gradual-rollout', 'rollback-strategy'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 70
          },
          
          // AGENT LEARNING
          {
            id: 'learning-b1',
            question: 'What does "agent learning" mean in the context of AI agents?',
            options: [
              'Only pre-training models',
              'The ability of agents to improve performance through experience and feedback',
              'Only reading documentation',
              'Only following fixed rules'
            ],
            correctAnswer: 1,
            explanation: 'Agent learning refers to the ability of AI agents to improve their performance over time through experience, feedback, and adaptation to new situations and environments.',
            difficulty: 'beginner',
            category: 'agent-learning',
            subCategory: 'learning-fundamentals',
            learningObjectives: ['Understand agent learning', 'Recognize adaptation capabilities'],
            relatedConcepts: ['adaptive-behavior', 'feedback-loops', 'experience-based-learning'],
            persona: ['business-leader', 'ai-enthusiast', 'agent-designer'],
            timeEstimate: 35
          },
          {
            id: 'learning-i1',
            question: 'What are the main types of learning mechanisms for AI agents?',
            options: [
              'Only supervised learning',
              'Reinforcement learning, online learning, transfer learning, and meta-learning',
              'Only unsupervised learning',
              'Only rule-based learning'
            ],
            correctAnswer: 1,
            explanation: 'AI agents can use reinforcement learning (reward-based), online learning (continuous updates), transfer learning (applying knowledge across domains), and meta-learning (learning how to learn).',
            difficulty: 'intermediate',
            category: 'agent-learning',
            subCategory: 'learning-types',
            learningObjectives: ['Identify learning mechanisms', 'Understand learning approaches'],
            relatedConcepts: ['reinforcement-learning', 'online-learning', 'transfer-learning', 'meta-learning'],
            persona: ['agent-developer', 'ai-engineer', 'ai-enthusiast'],
            timeEstimate: 50
          },
          {
            id: 'learning-a1',
            question: 'How can agent learning systems be designed to prevent catastrophic forgetting?',
            options: [
              'Only use static models',
              'Implement continual learning, memory replay, regularization, and knowledge distillation',
              'Only retrain from scratch',
              'Only use simple models'
            ],
            correctAnswer: 1,
            explanation: 'Preventing catastrophic forgetting requires continual learning techniques, memory replay of past experiences, regularization to preserve important knowledge, and knowledge distillation to transfer learning.',
            difficulty: 'advanced',
            category: 'agent-learning',
            subCategory: 'continual-learning',
            learningObjectives: ['Implement continual learning', 'Prevent knowledge loss'],
            relatedConcepts: ['continual-learning', 'memory-replay', 'regularization', 'knowledge-distillation'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          },
          
          // AGENT INTEGRATION
          {
            id: 'integration-b1',
            question: 'Why is agent integration important for enterprise systems?',
            options: [
              'Only for technical reasons',
              'To enable agents to work with existing systems, data, and workflows',
              'Only for cost reduction',
              'Only for compliance'
            ],
            correctAnswer: 1,
            explanation: 'Agent integration allows AI agents to work seamlessly with existing enterprise systems, access relevant data sources, and fit into established workflows without disrupting operations.',
            difficulty: 'beginner',
            category: 'agent-integration',
            subCategory: 'integration-fundamentals',
            learningObjectives: ['Understand integration importance', 'Recognize enterprise needs'],
            relatedConcepts: ['system-integration', 'data-access', 'workflow-compatibility'],
            persona: ['business-leader', 'no-code-engineer', 'agent-designer'],
            timeEstimate: 35
          },
          {
            id: 'integration-i1',
            question: 'What are the common integration patterns for AI agents?',
            options: [
              'Only direct database access',
              'API integration, message queues, event-driven architectures, and microservices',
              'Only file-based integration',
              'Only manual data entry'
            ],
            correctAnswer: 1,
            explanation: 'Common integration patterns include API integration for service communication, message queues for asynchronous processing, event-driven architectures for reactive systems, and microservices for modular deployment.',
            difficulty: 'intermediate',
            category: 'agent-integration',
            subCategory: 'integration-patterns',
            learningObjectives: ['Identify integration patterns', 'Select appropriate approaches'],
            relatedConcepts: ['api-integration', 'message-queues', 'event-driven', 'microservices'],
            persona: ['agent-developer', 'ai-engineer', 'agent-architect'],
            timeEstimate: 50
          },
          {
            id: 'integration-a1',
            question: 'How should agent integration be designed for high-availability enterprise environments?',
            options: [
              'Only use single connections',
              'Implement connection pooling, circuit breakers, retry logic, and health monitoring',
              'Only use synchronous calls',
              'Only use basic error handling'
            ],
            correctAnswer: 1,
            explanation: 'High-availability integration requires connection pooling for resource management, circuit breakers for fault isolation, retry logic for transient failures, and health monitoring for system visibility.',
            difficulty: 'advanced',
            category: 'agent-integration',
            subCategory: 'high-availability',
            learningObjectives: ['Design resilient integration', 'Implement high-availability patterns'],
            relatedConcepts: ['connection-pooling', 'circuit-breakers', 'retry-logic', 'health-monitoring'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          },
          
          // FLOW VISUALIZATION
          {
            id: 'flow-viz-b1',
            question: 'What is flow visualization in the context of AI agents?',
            options: [
              'Only showing code',
              'Visual representation of agent workflows, decision paths, and data flows',
              'Only showing databases',
              'Only showing user interfaces'
            ],
            correctAnswer: 1,
            explanation: 'Flow visualization shows how data and control flow through agent systems, including decision points, process steps, and interactions between components in a visual format.',
            difficulty: 'beginner',
            category: 'flow-visualization',
            subCategory: 'visualization-fundamentals',
            learningObjectives: ['Understand flow visualization', 'Recognize workflow benefits'],
            relatedConcepts: ['workflow-visualization', 'decision-trees', 'process-flows'],
            persona: ['business-leader', 'agent-designer', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'flow-viz-i1',
            question: 'Which visualization techniques are most effective for complex agent workflows?',
            options: [
              'Only text descriptions',
              'Interactive diagrams, hierarchical layouts, color coding, and progressive disclosure',
              'Only static images',
              'Only tabular data'
            ],
            correctAnswer: 1,
            explanation: 'Complex workflows benefit from interactive diagrams for exploration, hierarchical layouts for organization, color coding for categorization, and progressive disclosure for managing complexity.',
            difficulty: 'intermediate',
            category: 'flow-visualization',
            subCategory: 'visualization-techniques',
            learningObjectives: ['Select visualization techniques', 'Design complex workflows'],
            relatedConcepts: ['interactive-diagrams', 'hierarchical-layouts', 'color-coding', 'progressive-disclosure'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 45
          },
          {
            id: 'flow-viz-a1',
            question: 'How can flow visualization systems be optimized for real-time agent monitoring?',
            options: [
              'Only show static diagrams',
              'Implement streaming updates, efficient rendering, data aggregation, and interactive filtering',
              'Only use text logs',
              'Only show final results'
            ],
            correctAnswer: 1,
            explanation: 'Real-time flow visualization requires streaming updates for live data, efficient rendering for performance, data aggregation for scalability, and interactive filtering for focused analysis.',
            difficulty: 'advanced',
            category: 'flow-visualization',
            subCategory: 'real-time-visualization',
            learningObjectives: ['Optimize real-time visualization', 'Implement streaming updates'],
            relatedConcepts: ['streaming-updates', 'efficient-rendering', 'data-aggregation', 'interactive-filtering'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          },
          
          // COMMUNITY FEATURES
          {
            id: 'community-b1',
            question: 'What value do community features provide in AI agent development platforms?',
            options: [
              'Only social interaction',
              'Knowledge sharing, collaboration, best practices, and collective problem-solving',
              'Only entertainment',
              'Only marketing'
            ],
            correctAnswer: 1,
            explanation: 'Community features enable knowledge sharing among developers, collaborative problem-solving, sharing of best practices, and collective learning that accelerates AI agent development.',
            difficulty: 'beginner',
            category: 'community-features',
            subCategory: 'community-value',
            learningObjectives: ['Understand community benefits', 'Recognize collaborative value'],
            relatedConcepts: ['knowledge-sharing', 'collaboration', 'best-practices', 'collective-intelligence'],
            persona: ['business-leader', 'ai-enthusiast', 'agent-designer'],
            timeEstimate: 35
          },
          {
            id: 'community-i1',
            question: 'What features should be included in a community platform for AI agent developers?',
            options: [
              'Only basic messaging',
              'Pattern sharing, code examples, discussion forums, and collaborative tools',
              'Only file storage',
              'Only user profiles'
            ],
            correctAnswer: 1,
            explanation: 'Effective community platforms include pattern sharing for reusable solutions, code examples for learning, discussion forums for questions, and collaborative tools for joint development.',
            difficulty: 'intermediate',
            category: 'community-features',
            subCategory: 'platform-features',
            learningObjectives: ['Design community platforms', 'Implement collaboration tools'],
            relatedConcepts: ['pattern-sharing', 'code-examples', 'discussion-forums', 'collaborative-tools'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 50
          },
          {
            id: 'community-a1',
            question: 'How should community platforms handle quality control and moderation at scale?',
            options: [
              'No moderation needed',
              'Automated content filtering, peer review systems, reputation scoring, and expert curation',
              'Only manual review',
              'Only user reporting'
            ],
            correctAnswer: 1,
            explanation: 'Scalable community platforms use automated content filtering for initial screening, peer review systems for quality assurance, reputation scoring for trust, and expert curation for high-quality content.',
            difficulty: 'advanced',
            category: 'community-features',
            subCategory: 'quality-control',
            learningObjectives: ['Implement quality control', 'Design scalable moderation'],
            relatedConcepts: ['automated-filtering', 'peer-review', 'reputation-systems', 'expert-curation'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          },
          
          // ADVANCED ARCHITECTURE
          {
            id: 'architecture-b1',
            question: 'What are the key principles of scalable AI agent architecture?',
            options: [
              'Only single-server deployment',
              'Modularity, scalability, fault tolerance, and maintainability',
              'Only performance optimization',
              'Only cost reduction'
            ],
            correctAnswer: 1,
            explanation: 'Scalable AI agent architecture is built on modularity for component independence, scalability for handling growth, fault tolerance for reliability, and maintainability for long-term operation.',
            difficulty: 'beginner',
            category: 'advanced-architecture',
            subCategory: 'architecture-principles',
            learningObjectives: ['Understand architecture principles', 'Recognize scalability needs'],
            relatedConcepts: ['modularity', 'scalability', 'fault-tolerance', 'maintainability'],
            persona: ['business-leader', 'agent-architect', 'ai-engineer'],
            timeEstimate: 40
          },
          {
            id: 'architecture-i1',
            question: 'What architectural patterns are commonly used for distributed AI agent systems?',
            options: [
              'Only monolithic architecture',
              'Microservices, event-driven architecture, CQRS, and saga patterns',
              'Only client-server architecture',
              'Only layered architecture'
            ],
            correctAnswer: 1,
            explanation: 'Distributed AI agent systems commonly use microservices for modularity, event-driven architecture for loose coupling, CQRS for read/write separation, and saga patterns for distributed transactions.',
            difficulty: 'intermediate',
            category: 'advanced-architecture',
            subCategory: 'distributed-patterns',
            learningObjectives: ['Identify distributed patterns', 'Select appropriate architectures'],
            relatedConcepts: ['microservices', 'event-driven', 'cqrs', 'saga-pattern'],
            persona: ['agent-developer', 'ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'architecture-a1',
            question: 'How should AI agent architectures be designed for global deployment and compliance?',
            options: [
              'Only single-region deployment',
              'Multi-region deployment, data residency, compliance frameworks, and edge computing',
              'Only cloud deployment',
              'Only on-premises deployment'
            ],
            correctAnswer: 1,
            explanation: 'Global AI agent architectures require multi-region deployment for performance, data residency compliance for regulations, compliance frameworks for governance, and edge computing for local processing.',
            difficulty: 'advanced',
            category: 'advanced-architecture',
            subCategory: 'global-deployment',
            learningObjectives: ['Design global architectures', 'Implement compliance patterns'],
            relatedConcepts: ['multi-region', 'data-residency', 'compliance-frameworks', 'edge-computing'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 70
          }
        ]
      }
    ]
  },
  
  // Keep existing categories with original structure
  {
    id: 'azure-services',
    name: 'Azure Services',
    description: 'Azure services for AI agent development',
    icon: 'CloudArrowUp',
    totalQuestions: 25,
    estimatedTime: 20,
    subCategories: [
      {
        id: 'azure-openai',
        name: 'Azure OpenAI',
        description: 'Using Azure OpenAI Service with AI agents',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'azure-openai-b1',
            question: 'What is Azure OpenAI Service?',
            options: [
              'A storage service',
              'A managed service that provides access to OpenAI models with enterprise security',
              'A networking service',
              'A database service'
            ],
            correctAnswer: 1,
            explanation: 'Azure OpenAI Service is a managed service that provides access to powerful OpenAI models like GPT-4 with enterprise-grade security, compliance, and integration capabilities.',
            difficulty: 'beginner',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Understand Azure OpenAI Service'],
            relatedConcepts: ['managed-service', 'enterprise-security', 'model-access'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'azure-openai-b2',
            question: 'What are the main business benefits of using Azure OpenAI versus direct OpenAI API?',
            options: [
              'It\'s completely free',
              'Enhanced security, compliance, and enterprise integration capabilities',
              'It works faster than OpenAI',
              'It requires no setup'
            ],
            correctAnswer: 1,
            explanation: 'Azure OpenAI provides enhanced security, compliance features, and enterprise integration capabilities that are essential for business applications.',
            difficulty: 'beginner',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Understand Azure OpenAI business benefits'],
            relatedConcepts: ['enterprise-security', 'compliance', 'business-integration'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          {
            id: 'azure-openai-i1',
            question: 'How do you integrate Azure OpenAI with AI agent systems?',
            options: [
              'Only through web browsers',
              'Using REST APIs, SDKs, and Azure SDK integration',
              'Only through command line',
              'Only through Azure portal'
            ],
            correctAnswer: 1,
            explanation: 'Azure OpenAI can be integrated with AI agent systems using REST APIs, language-specific SDKs, and Azure SDK integration for seamless connectivity.',
            difficulty: 'intermediate',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Implement Azure OpenAI integration'],
            relatedConcepts: ['rest-apis', 'sdks', 'azure-integration'],
            persona: ['agent-developer', 'ai-engineer'],
            timeEstimate: 45
          },
          {
            id: 'azure-openai-i2',
            question: 'What are the key considerations for scaling Azure OpenAI in production agent systems?',
            options: [
              'Only server capacity',
              'Rate limits, token quotas, model deployment strategies, and cost optimization',
              'Only network bandwidth',
              'Only storage capacity'
            ],
            correctAnswer: 1,
            explanation: 'Scaling Azure OpenAI requires managing rate limits, token quotas, choosing appropriate model deployment strategies, and implementing cost optimization measures.',
            difficulty: 'intermediate',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Scale Azure OpenAI deployments'],
            relatedConcepts: ['rate-limits', 'token-quotas', 'deployment-strategies', 'cost-optimization'],
            persona: ['ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 50
          },
          {
            id: 'azure-openai-a1',
            question: 'How should you implement content filtering and safety measures for Azure OpenAI in agent systems?',
            options: [
              'No filtering is needed',
              'Use Azure OpenAI content filters, custom validation, and monitoring systems',
              'Only use basic keyword filtering',
              'Only rely on model training'
            ],
            correctAnswer: 1,
            explanation: 'Comprehensive safety requires Azure OpenAI built-in content filters, custom validation logic, and monitoring systems to ensure safe and appropriate agent responses.',
            difficulty: 'advanced',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Implement Azure OpenAI safety measures'],
            relatedConcepts: ['content-filtering', 'safety-monitoring', 'validation-systems'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'azure-openai-a2',
            question: 'What are the best practices for managing Azure OpenAI costs in high-volume agent deployments?',
            options: [
              'Use the most expensive models only',
              'Implement token optimization, model selection strategies, caching, and usage monitoring',
              'Only use free services',
              'Avoid all optimization'
            ],
            correctAnswer: 1,
            explanation: 'Cost management requires token optimization, strategic model selection, response caching, and comprehensive usage monitoring to balance performance with cost efficiency.',
            difficulty: 'advanced',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Optimize Azure OpenAI costs'],
            relatedConcepts: ['token-optimization', 'model-selection', 'caching', 'cost-monitoring'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      }
    ]
  }
];

// Utility functions for quiz management
export const getQuizzesByPersona = (persona: string, difficulty?: 'beginner' | 'intermediate' | 'advanced') => {
          // Intermediate Questions
          {
            id: 'a2a-i1',
            question: 'What are the key components of an A2A message?',
            options: [
              'Only the message content',
              'Sender ID, recipient ID, message type, content, and metadata',
              'Just the timestamp',
              'Only the sender information'
            ],
            correctAnswer: 1,
            explanation: 'A2A messages typically include sender ID, recipient ID, message type, content, and metadata such as timestamps, priority levels, and conversation context.',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'a2a-protocol',
            learningObjectives: ['Understand A2A message structure'],
            relatedConcepts: ['message-structure', 'metadata', 'communication-protocol'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'a2a-i2',
            question: 'What is the role of message queues in A2A communication?',
            options: [
              'To delete messages automatically',
              'To ensure reliable message delivery and handle asynchronous communication',
              'To slow down message processing',
              'To encrypt all messages'
            ],
            correctAnswer: 1,
            explanation: 'Message queues ensure reliable message delivery and handle asynchronous communication, allowing agents to send messages even when recipients are temporarily unavailable.',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'a2a-protocol',
            learningObjectives: ['Understand message queuing mechanisms'],
            relatedConcepts: ['message-queues', 'asynchronous-communication', 'reliability'],
            persona: ['agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Advanced Questions
          {
            id: 'a2a-a1',
            question: 'How should A2A protocols handle message ordering and causality in distributed systems?',
            options: [
              'Messages should always arrive in the order they were sent',
              'Implement vector clocks or logical timestamps to maintain causal relationships',
              'Ignore message ordering completely',
              'Use only synchronous communication'
            ],
            correctAnswer: 1,
            explanation: 'In distributed systems, A2A protocols should implement vector clocks or logical timestamps to maintain causal relationships between messages, as physical ordering cannot be guaranteed.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'a2a-protocol',
            learningObjectives: ['Design distributed A2A systems'],
            relatedConcepts: ['vector-clocks', 'causality', 'distributed-systems'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'a2a-a2',
            question: 'What is the optimal strategy for handling A2A protocol versioning in production systems?',
            options: [
              'Always use the latest version only',
              'Implement backward compatibility with graceful degradation and version negotiation',
              'Never change protocol versions',
              'Use different protocols for each agent'
            ],
            correctAnswer: 1,
            explanation: 'Production A2A systems should implement backward compatibility with graceful degradation and version negotiation to ensure smooth transitions and system stability.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'a2a-protocol',
            learningObjectives: ['Design versioning strategies'],
            relatedConcepts: ['protocol-versioning', 'backward-compatibility', 'system-stability'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      },
      {
        id: 'mcp',
        name: 'Model Context Protocol (MCP)',
        description: 'Protocol for efficient AI model interaction and context management',
        prerequisites: ['agents'],
        questions: [
          // Beginner Questions
          {
            id: 'mcp-b1',
            question: 'What is the Model Context Protocol (MCP) designed to solve?',
            options: [
              'Making AI models run faster',
              'Standardizing how AI models access and share contextual information',
              'Reducing AI model size',
              'Eliminating the need for training data'
            ],
            correctAnswer: 1,
            explanation: 'MCP is designed to standardize how AI models access and share contextual information, enabling more efficient and consistent interactions between models and applications.',
            difficulty: 'beginner',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Understand MCP purpose'],
            relatedConcepts: ['context-management', 'standardization', 'model-interaction'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'mcp-b2',
            question: 'What business benefit does MCP provide to organizations?',
            options: [
              'Eliminates the need for AI models',
              'Reduces integration complexity and improves AI application reliability',
              'Makes all AI models identical',
              'Removes the need for data'
            ],
            correctAnswer: 1,
            explanation: 'MCP reduces integration complexity and improves AI application reliability by providing a standardized way for different AI components to share context and information.',
            difficulty: 'beginner',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Identify MCP business benefits'],
            relatedConcepts: ['integration', 'reliability', 'standardization'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          // Intermediate Questions
          {
            id: 'mcp-i1',
            question: 'What types of context can MCP manage?',
            options: [
              'Only text data',
              'Conversation history, tool definitions, schemas, and resource access',
              'Only images',
              'Only database connections'
            ],
            correctAnswer: 1,
            explanation: 'MCP can manage various types of context including conversation history, tool definitions, schemas, resource access permissions, and other metadata needed for AI model interactions.',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Understand MCP context types'],
            relatedConcepts: ['context-types', 'conversation-history', 'tool-definitions'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'mcp-i2',
            question: 'How does MCP handle resource access and permissions?',
            options: [
              'It gives all models full access to everything',
              'It implements fine-grained access control with capability-based permissions',
              'It blocks all resource access',
              'It only works with public resources'
            ],
            correctAnswer: 1,
            explanation: 'MCP implements fine-grained access control with capability-based permissions, allowing precise control over what resources each model or agent can access.',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Understand MCP security model'],
            relatedConcepts: ['access-control', 'permissions', 'security'],
            persona: ['agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Advanced Questions
          {
            id: 'mcp-a1',
            question: 'What are the key architectural considerations for implementing MCP in a distributed system?',
            options: [
              'Using a single central server for all context',
              'Implementing distributed context synchronization with eventual consistency',
              'Storing all context in memory only',
              'Avoiding any context sharing'
            ],
            correctAnswer: 1,
            explanation: 'In distributed systems, MCP implementation requires distributed context synchronization with eventual consistency to ensure context coherence across different nodes while maintaining performance.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Design distributed MCP systems'],
            relatedConcepts: ['distributed-systems', 'eventual-consistency', 'context-synchronization'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'mcp-a2',
            question: 'How should MCP implementations handle context versioning and migration?',
            options: [
              'Never change context formats',
              'Implement semantic versioning with backward-compatible transformations',
              'Always use the newest format only',
              'Store multiple copies of all context'
            ],
            correctAnswer: 1,
            explanation: 'MCP implementations should use semantic versioning with backward-compatible transformations to handle context evolution while maintaining compatibility with existing systems.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'mcp',
            learningObjectives: ['Design context versioning strategies'],
            relatedConcepts: ['semantic-versioning', 'context-migration', 'backward-compatibility'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      },
      {
        id: 'acp',
        name: 'Agent Communication Protocol (ACP)',
        description: 'Standardized communication protocol for AI agent interactions',
        prerequisites: ['agents', 'a2a-protocol'],
        questions: [
          // Beginner Questions
          {
            id: 'acp-b1',
            question: 'What is the Agent Communication Protocol (ACP)?',
            options: [
              'A protocol for human-agent communication only',
              'A standardized protocol for AI agents to communicate with each other and external systems',
              'A database protocol',
              'A network security protocol'
            ],
            correctAnswer: 1,
            explanation: 'ACP is a standardized protocol that enables AI agents to communicate effectively with each other and with external systems, providing a common language for agent interactions.',
            difficulty: 'beginner',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Define ACP'],
            relatedConcepts: ['standardization', 'communication-protocol', 'interoperability'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'acp-b2',
            question: 'Why is a standardized communication protocol important for AI agents?',
            options: [
              'To make all agents identical',
              'To enable interoperability between different agent systems and vendors',
              'To slow down communication',
              'To eliminate the need for agents'
            ],
            correctAnswer: 1,
            explanation: 'A standardized communication protocol like ACP enables interoperability between different agent systems and vendors, preventing vendor lock-in and enabling ecosystem growth.',
            difficulty: 'beginner',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Understand ACP importance'],
            relatedConcepts: ['interoperability', 'vendor-independence', 'ecosystem'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          // Intermediate Questions
          {
            id: 'acp-i1',
            question: 'What are the key layers of the ACP protocol stack?',
            options: [
              'Only the message layer',
              'Transport, message, content, and interaction layers',
              'Only the transport layer',
              'Just the content layer'
            ],
            correctAnswer: 1,
            explanation: 'ACP typically includes transport layer (message delivery), message layer (structure), content layer (semantics), and interaction layer (conversation patterns).',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Understand ACP architecture'],
            relatedConcepts: ['protocol-stack', 'layered-architecture', 'separation-of-concerns'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'acp-i2',
            question: 'How does ACP handle different message types and conversation patterns?',
            options: [
              'It only supports one message type',
              'It defines message ontologies and conversation protocols for different interaction patterns',
              'It converts all messages to text',
              'It ignores message types'
            ],
            correctAnswer: 1,
            explanation: 'ACP defines message ontologies and conversation protocols to handle different interaction patterns like request-response, negotiation, and coordination.',
            difficulty: 'intermediate',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Understand ACP message types'],
            relatedConcepts: ['message-ontologies', 'conversation-protocols', 'interaction-patterns'],
            persona: ['agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Advanced Questions
          {
            id: 'acp-a1',
            question: 'What are the key challenges in implementing ACP for large-scale multi-agent systems?',
            options: [
              'Making all agents use the same hardware',
              'Managing protocol complexity, ensuring scalability, and maintaining semantic consistency',
              'Eliminating all communication',
              'Using only synchronous communication'
            ],
            correctAnswer: 1,
            explanation: 'Large-scale ACP implementations face challenges in managing protocol complexity, ensuring scalability across many agents, and maintaining semantic consistency in communications.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Design scalable ACP systems'],
            relatedConcepts: ['scalability', 'protocol-complexity', 'semantic-consistency'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'acp-a2',
            question: 'How should ACP implementations handle security and trust in open agent environments?',
            options: [
              'Trust all agents completely',
              'Implement cryptographic signatures, capability-based access control, and reputation systems',
              'Block all external agents',
              'Use only private networks'
            ],
            correctAnswer: 1,
            explanation: 'ACP security requires cryptographic signatures for message authenticity, capability-based access control for permissions, and reputation systems for trust management.',
            difficulty: 'advanced',
            category: 'core-concepts',
            subCategory: 'acp',
            learningObjectives: ['Design secure ACP systems'],
            relatedConcepts: ['cryptographic-signatures', 'capability-based-security', 'reputation-systems'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      }
    ]
  },
  {
    id: 'agent-patterns',
    name: 'Agent Patterns',
    description: 'Common patterns and architectures for AI agent implementation',
    icon: 'PuzzlePiece',
    totalQuestions: 40,
    estimatedTime: 22,
    subCategories: [
      {
        id: 'react-pattern',
        name: 'ReAct Pattern',
        description: 'Reasoning and Acting pattern for AI agents',
        prerequisites: ['agents'],
        questions: [
          // Beginner Questions
          {
            id: 'react-b1',
            question: 'What does "ReAct" stand for in AI agent patterns?',
            options: [
              'React to Actions',
              'Reason and Act',
              'Reactive Actions',
              'Real Actions'
            ],
            correctAnswer: 1,
            explanation: 'ReAct stands for "Reason and Act" - it\'s a pattern where agents alternate between reasoning about their situation and taking actions based on that reasoning.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Define ReAct pattern'],
            relatedConcepts: ['reasoning', 'action', 'thought-process'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'react-b2',
            question: 'What is the main business advantage of the ReAct pattern?',
            options: [
              'It makes agents work faster',
              'It eliminates all errors',
              'It provides transparent decision-making that can be audited and understood',
              'It works without any training'
            ],
            correctAnswer: 2,
            explanation: 'The ReAct pattern provides transparent decision-making by explicitly showing the reasoning process, making it easier to audit, understand, and trust agent decisions.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Understand ReAct business benefits'],
            relatedConcepts: ['transparency', 'auditability', 'trust'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          // Intermediate Questions
          {
            id: 'react-i1',
            question: 'In the ReAct pattern, what is the typical sequence of operations?',
            options: [
              'Action → Thought → Observation',
              'Thought → Action → Observation',
              'Observation → Action → Thought',
              'Only actions, no thoughts'
            ],
            correctAnswer: 1,
            explanation: 'The ReAct pattern follows: Thought (reasoning about current state) → Action (taking a step) → Observation (seeing the result), then repeating this cycle.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Understand ReAct sequence'],
            relatedConcepts: ['thought-action-observation', 'iterative-process', 'feedback-loop'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'react-i2',
            question: 'When should you use the ReAct pattern versus other agent patterns?',
            options: [
              'Always use ReAct for every task',
              'Use ReAct when you need explicit reasoning traces and step-by-step problem solving',
              'Never use ReAct',
              'Only use ReAct for simple tasks'
            ],
            correctAnswer: 1,
            explanation: 'ReAct is best used when you need explicit reasoning traces, step-by-step problem solving, or when decisions need to be explainable and auditable.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Know when to use ReAct'],
            relatedConcepts: ['pattern-selection', 'use-cases', 'explainability'],
            persona: ['agent-designer', 'agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Advanced Questions
          {
            id: 'react-a1',
            question: 'What are the main challenges in implementing ReAct for complex multi-step tasks?',
            options: [
              'There are no challenges',
              'Managing reasoning chain length, handling reasoning errors, and preventing infinite loops',
              'It works perfectly for all tasks',
              'Only the speed of execution'
            ],
            correctAnswer: 1,
            explanation: 'Complex ReAct implementations face challenges in managing reasoning chain length, handling reasoning errors gracefully, and preventing infinite loops in the thought-action cycle.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Understand ReAct implementation challenges'],
            relatedConcepts: ['chain-length-management', 'error-handling', 'loop-prevention'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'react-a2',
            question: 'How can ReAct be optimized for production environments with latency constraints?',
            options: [
              'Remove all reasoning steps',
              'Implement reasoning caching, parallel action execution, and adaptive reasoning depth',
              'Use only simple actions',
              'Avoid production use'
            ],
            correctAnswer: 1,
            explanation: 'Production ReAct optimization includes reasoning caching for common patterns, parallel action execution where possible, and adaptive reasoning depth based on task complexity.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'react-pattern',
            learningObjectives: ['Optimize ReAct for production'],
            relatedConcepts: ['performance-optimization', 'caching', 'parallel-execution'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      },
      {
        id: 'self-reflection',
        name: 'Self-Reflection Pattern',
        description: 'Pattern for agents to evaluate and improve their own performance',
        prerequisites: ['agents', 'react-pattern'],
        questions: [
          // Beginner Questions
          {
            id: 'reflection-b1',
            question: 'What is the self-reflection pattern in AI agents?',
            options: [
              'Agents looking at mirrors',
              'Agents evaluating their own performance and learning from mistakes',
              'Agents copying other agents',
              'Agents working alone'
            ],
            correctAnswer: 1,
            explanation: 'The self-reflection pattern involves agents evaluating their own performance, identifying mistakes or areas for improvement, and adjusting their behavior accordingly.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Define self-reflection pattern'],
            relatedConcepts: ['self-evaluation', 'performance-improvement', 'learning'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'reflection-b2',
            question: 'What business value does self-reflection provide to AI agents?',
            options: [
              'Makes agents more expensive',
              'Enables continuous improvement and reduces the need for manual corrections',
              'Slows down agent performance',
              'Makes agents more complex to use'
            ],
            correctAnswer: 1,
            explanation: 'Self-reflection enables continuous improvement in agent performance and reduces the need for manual corrections, leading to more autonomous and reliable systems.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Understand self-reflection business value'],
            relatedConcepts: ['continuous-improvement', 'autonomy', 'reliability'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          // Intermediate Questions
          {
            id: 'reflection-i1',
            question: 'What are the key components of the self-reflection cycle?',
            options: [
              'Only action execution',
              'Action execution, outcome evaluation, learning extraction, and strategy adjustment',
              'Only outcome evaluation',
              'Just strategy adjustment'
            ],
            correctAnswer: 1,
            explanation: 'The self-reflection cycle includes: executing actions, evaluating outcomes, extracting learnings from successes and failures, and adjusting strategies for future actions.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Understand reflection cycle components'],
            relatedConcepts: ['reflection-cycle', 'outcome-evaluation', 'strategy-adjustment'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'reflection-i2',
            question: 'How does self-reflection integrate with other agent patterns like ReAct?',
            options: [
              'It replaces all other patterns',
              'It adds a meta-cognitive layer that evaluates the reasoning and actions of other patterns',
              'It cannot be used with other patterns',
              'It only works in isolation'
            ],
            correctAnswer: 1,
            explanation: 'Self-reflection adds a meta-cognitive layer that can evaluate the reasoning and actions of other patterns like ReAct, providing feedback for improvement.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Understand pattern integration'],
            relatedConcepts: ['meta-cognition', 'pattern-composition', 'feedback-loops'],
            persona: ['agent-designer', 'agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Additional Intermediate Questions for Better Coverage
          {
            id: 'reflection-i3',
            question: 'How would you implement a self-reflection mechanism for an AI agent in a production environment?',
            options: [
              'Use simple if-else statements to check outputs',
              'Implement a feedback loop with performance metrics, error tracking, and automated adjustment mechanisms',
              'Have humans manually review every action',
              'Use random sampling to check results'
            ],
            correctAnswer: 1,
            explanation: 'Production self-reflection requires systematic feedback loops with performance metrics, error tracking, and automated adjustment mechanisms to enable continuous improvement.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Implement self-reflection in production'],
            relatedConcepts: ['feedback-loops', 'performance-metrics', 'error-tracking', 'automation'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 45,
            codeExample: `
class SelfReflectingAgent:
    def __init__(self):
        self.performance_metrics = {}
        self.error_log = []
        self.adjustment_thresholds = {'accuracy': 0.8, 'response_time': 2.0}
    
    def reflect_on_performance(self):
        current_metrics = self.calculate_metrics()
        if current_metrics['accuracy'] < self.adjustment_thresholds['accuracy']:
            self.adjust_strategy('accuracy')
        if current_metrics['response_time'] > self.adjustment_thresholds['response_time']:
            self.adjust_strategy('speed')
    
    def adjust_strategy(self, metric):
        # Implement adjustment logic based on metric
        pass
            `
          },
          {
            id: 'reflection-i4',
            question: 'What design patterns can be combined with self-reflection for maximum effectiveness?',
            options: [
              'Only observer pattern',
              'Strategy pattern for adaptive behavior, Chain of Responsibility for error handling, and Observer for monitoring',
              'Just singleton pattern',
              'Template method pattern only'
            ],
            correctAnswer: 1,
            explanation: 'Effective self-reflection combines multiple patterns: Strategy for adaptive behavior, Chain of Responsibility for error handling, and Observer for real-time monitoring.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Combine design patterns with self-reflection'],
            relatedConcepts: ['design-patterns', 'strategy-pattern', 'observer-pattern', 'chain-of-responsibility'],
            persona: ['agent-architect', 'agent-developer', 'ai-engineer'],
            timeEstimate: 50
          },
          // Advanced Questions
          {
            id: 'reflection-a1',
            question: 'What are the main challenges in implementing effective self-reflection systems?',
            options: [
              'There are no challenges',
              'Avoiding over-reflection, ensuring objective self-evaluation, and preventing reflection loops',
              'Only computational cost',
              'Just memory usage'
            ],
            correctAnswer: 1,
            explanation: 'Effective self-reflection systems must avoid over-reflection (analysis paralysis), ensure objective self-evaluation, and prevent infinite reflection loops while maintaining performance.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Understand reflection implementation challenges'],
            relatedConcepts: ['over-reflection', 'objective-evaluation', 'reflection-loops'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'reflection-a2',
            question: 'How should self-reflection systems handle conflicting feedback and learning signals?',
            options: [
              'Ignore all feedback',
              'Implement weighted feedback integration with confidence scoring and temporal decay',
              'Use only the latest feedback',
              'Average all feedback equally'
            ],
            correctAnswer: 1,
            explanation: 'Advanced self-reflection systems should implement weighted feedback integration, considering confidence scores, source reliability, and temporal decay to handle conflicting signals.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'self-reflection',
            learningObjectives: ['Design advanced reflection systems'],
            relatedConcepts: ['weighted-feedback', 'confidence-scoring', 'temporal-decay'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      }
    ]
  },
  {
    id: 'azure-services',
    name: 'Azure AI Services',
    description: 'Microsoft Azure AI services and their integration with agent systems',
    icon: 'StackSimple',
    totalQuestions: 35,
    estimatedTime: 20,
    subCategories: [
      {
        id: 'azure-openai',
        name: 'Azure OpenAI',
        description: 'Azure OpenAI service and its capabilities',
        prerequisites: ['agents'],
        questions: [
          // Beginner Questions
          {
            id: 'aoai-b1',
            question: 'What is Azure OpenAI Service?',
            options: [
              'A database service',
              'Microsoft\'s cloud-based service providing access to OpenAI models with enterprise security',
              'A web hosting service',
              'A backup service'
            ],
            correctAnswer: 1,
            explanation: 'Azure OpenAI Service is Microsoft\'s cloud-based service that provides access to OpenAI models like GPT-4 with enterprise-grade security, compliance, and regional availability.',
            difficulty: 'beginner',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Define Azure OpenAI Service'],
            relatedConcepts: ['cloud-services', 'enterprise-security', 'compliance'],
            persona: ['business-leader', 'no-code-engineer'],
            timeEstimate: 30
          },
          {
            id: 'aoai-b2',
            question: 'What are the main business benefits of using Azure OpenAI versus direct OpenAI API?',
            options: [
              'It\'s always cheaper',
              'It\'s faster',
              'It has more models',
              'Enterprise security, compliance, data residency, and integration with Azure ecosystem'
            ],
            correctAnswer: 3,
            explanation: 'Azure OpenAI provides enterprise security, compliance certifications, data residency options, and seamless integration with the Azure ecosystem, making it suitable for enterprise use.',
            difficulty: 'beginner',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Understand Azure OpenAI business benefits'],
            relatedConcepts: ['enterprise-security', 'compliance', 'data-residency'],
            persona: ['business-leader'],
            timeEstimate: 35
          },
          // Intermediate Questions
          {
            id: 'aoai-i1',
            question: 'How do you integrate Azure OpenAI with AI agent systems?',
            options: [
              'It cannot be integrated',
              'Through REST APIs, SDKs, and Azure services like Functions or Logic Apps',
              'Only through manual processes',
              'Only through third-party tools'
            ],
            correctAnswer: 1,
            explanation: 'Azure OpenAI integrates with AI agent systems through REST APIs, official SDKs, and Azure services like Functions, Logic Apps, or Container Apps for scalable deployments.',
            difficulty: 'intermediate',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Understand Azure OpenAI integration'],
            relatedConcepts: ['REST-APIs', 'SDKs', 'Azure-services'],
            persona: ['agent-designer', 'agent-developer'],
            timeEstimate: 40
          },
          {
            id: 'aoai-i2',
            question: 'What are the key considerations for scaling Azure OpenAI in production agent systems?',
            options: [
              'Only cost',
              'Rate limits, token usage, model selection, and deployment strategies',
              'Only speed',
              'Only availability'
            ],
            correctAnswer: 1,
            explanation: 'Production scaling requires managing rate limits, monitoring token usage, selecting appropriate models for different tasks, and implementing deployment strategies for reliability.',
            difficulty: 'intermediate',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Understand scaling considerations'],
            relatedConcepts: ['rate-limits', 'token-usage', 'model-selection'],
            persona: ['agent-developer', 'ai-enthusiast'],
            timeEstimate: 45
          },
          // Advanced Questions
          {
            id: 'aoai-a1',
            question: 'How should you implement content filtering and safety measures for Azure OpenAI in agent systems?',
            options: [
              'No filtering is needed',
              'Implement multi-layered filtering with custom content policies, prompt injection detection, and output validation',
              'Use only Azure\'s default filters',
              'Block all content'
            ],
            correctAnswer: 1,
            explanation: 'Production agent systems should implement multi-layered content filtering including custom policies, prompt injection detection, output validation, and monitoring for safety.',
            difficulty: 'advanced',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Design safety measures'],
            relatedConcepts: ['content-filtering', 'prompt-injection', 'output-validation'],
            persona: ['ai-engineer', 'agent-architect'],
            timeEstimate: 55
          },
          {
            id: 'aoai-a2',
            question: 'What are the best practices for managing Azure OpenAI costs in high-volume agent deployments?',
            options: [
              'Use unlimited resources',
              'Implement token optimization, model right-sizing, caching strategies, and usage monitoring',
              'Only use free tiers',
              'Avoid monitoring'
            ],
            correctAnswer: 1,
            explanation: 'Cost management requires token optimization, choosing right-sized models, implementing caching for common responses, and comprehensive usage monitoring and alerting.',
            difficulty: 'advanced',
            category: 'azure-services',
            subCategory: 'azure-openai',
            learningObjectives: ['Optimize costs'],
            relatedConcepts: ['token-optimization', 'model-right-sizing', 'caching-strategies'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      }
    ]
  },
  
  // New category for Agent Patterns
  {
    id: 'agent-patterns',
    name: 'Agent Patterns',
    description: 'Design patterns and implementation strategies for AI agents',
    icon: 'Lightbulb',
    totalQuestions: 35,
    estimatedTime: 30,
    subCategories: [
      {
        id: 'voice-agent',
        name: 'Voice Agent Patterns',
        description: 'Patterns for voice-enabled AI agents',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'patterns-voice-b1',
            question: 'What is the primary purpose of the Voice Agent pattern?',
            options: [
              'To create text-only agents',
              'To enable AI agents to interact through voice interfaces with speech recognition and synthesis',
              'To create visual agents only',
              'To eliminate user interfaces entirely'
            ],
            correctAnswer: 1,
            explanation: 'The Voice Agent pattern enables AI agents to interact through voice interfaces, incorporating speech recognition for input and text-to-speech for output, creating natural conversational experiences.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Understand voice agent basics', 'Recognize voice interaction benefits'],
            relatedConcepts: ['speech-recognition', 'text-to-speech', 'natural-interaction'],
            persona: ['business-leader', 'no-code-engineer', 'agent-designer'],
            timeEstimate: 30
          },
          {
            id: 'patterns-voice-i1',
            question: 'Which Azure services are commonly used to implement Voice Agent patterns?',
            options: [
              'Only Azure OpenAI',
              'Azure Speech Services, Azure OpenAI, and Azure Cognitive Services',
              'Only Azure Storage',
              'Only Azure Functions'
            ],
            correctAnswer: 1,
            explanation: 'Voice Agent patterns typically use Azure Speech Services for speech recognition and synthesis, Azure OpenAI for natural language processing, and Azure Cognitive Services for additional AI capabilities.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Identify Azure services for voice agents', 'Understand service integration'],
            relatedConcepts: ['azure-speech', 'service-integration', 'voice-pipeline'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 45
          },
          {
            id: 'patterns-voice-a1',
            question: 'What are the key considerations for implementing Voice Agent patterns in enterprise environments?',
            options: [
              'Only cost considerations',
              'Latency, privacy, multi-language support, noise handling, and security',
              'Only technical specifications',
              'Only user preferences'
            ],
            correctAnswer: 1,
            explanation: 'Enterprise Voice Agent implementations must consider latency for real-time interaction, privacy for sensitive data, multi-language support for global users, noise handling for various environments, and security for voice data protection.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'voice-agent',
            learningObjectives: ['Evaluate enterprise voice requirements', 'Design secure voice systems'],
            relatedConcepts: ['enterprise-requirements', 'voice-security', 'performance-optimization'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      },
      {
        id: 'computer-use',
        name: 'Computer Use Patterns',
        description: 'Patterns for agents that interact with computer interfaces',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'patterns-computer-b1',
            question: 'What does the Computer Use pattern enable AI agents to do?',
            options: [
              'Only process text data',
              'Interact with computer interfaces, click buttons, and manipulate UI elements',
              'Only read files',
              'Only send emails'
            ],
            correctAnswer: 1,
            explanation: 'The Computer Use pattern enables AI agents to interact with computer interfaces by clicking buttons, filling forms, navigating windows, and manipulating UI elements, essentially allowing agents to use software like humans do.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Understand computer use capabilities', 'Recognize UI automation benefits'],
            relatedConcepts: ['ui-automation', 'screen-interaction', 'human-like-interaction'],
            persona: ['business-leader', 'no-code-engineer', 'agent-designer'],
            timeEstimate: 35
          },
          {
            id: 'patterns-computer-i1',
            question: 'What technologies are typically used to implement Computer Use patterns?',
            options: [
              'Only keyboard inputs',
              'Screen capture, OCR, UI automation libraries, and vision models',
              'Only mouse clicks',
              'Only text processing'
            ],
            correctAnswer: 1,
            explanation: 'Computer Use patterns typically use screen capture for visual input, OCR for text recognition, UI automation libraries for interaction, and vision models for understanding screen content.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Identify computer use technologies', 'Understand implementation stack'],
            relatedConcepts: ['screen-capture', 'ocr', 'ui-automation', 'computer-vision'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 50
          },
          {
            id: 'patterns-computer-a1',
            question: 'How should Computer Use patterns handle security and access control in enterprise environments?',
            options: [
              'Allow unrestricted access',
              'Implement sandboxing, permission controls, audit logging, and secure credential management',
              'Only use basic passwords',
              'Disable all security features'
            ],
            correctAnswer: 1,
            explanation: 'Enterprise Computer Use patterns require sandboxing to isolate agent actions, permission controls to limit access, audit logging for compliance, and secure credential management for authentication.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'computer-use',
            learningObjectives: ['Design secure computer use systems', 'Implement enterprise controls'],
            relatedConcepts: ['sandboxing', 'access-control', 'security-compliance', 'audit-logging'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 65
          }
        ]
      },
      {
        id: 'code-act',
        name: 'Code Act Patterns',
        description: 'Patterns for agents that write and execute code',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'patterns-codeact-b1',
            question: 'What is the Code Act pattern in AI agent development?',
            options: [
              'Writing only documentation',
              'An agent pattern that enables agents to write, execute, and iterate on code to solve problems',
              'Only reading code',
              'Only testing existing code'
            ],
            correctAnswer: 1,
            explanation: 'The Code Act pattern enables AI agents to write, execute, and iterate on code to solve problems, combining reasoning with code generation and execution in a feedback loop.',
            difficulty: 'beginner',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Understand code act concept', 'Recognize code-based problem solving'],
            relatedConcepts: ['code-generation', 'code-execution', 'iterative-development'],
            persona: ['agent-developer', 'ai-enthusiast', 'agent-designer'],
            timeEstimate: 40
          },
          {
            id: 'patterns-codeact-i1',
            question: 'What safety measures should be implemented for Code Act patterns?',
            options: [
              'No safety measures needed',
              'Code sandboxing, execution timeouts, resource limits, and output validation',
              'Only basic error handling',
              'Only syntax checking'
            ],
            correctAnswer: 1,
            explanation: 'Code Act patterns require sandboxing to isolate code execution, timeouts to prevent infinite loops, resource limits to prevent system overload, and output validation to ensure safe results.',
            difficulty: 'intermediate',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Implement code execution safety', 'Design secure code environments'],
            relatedConcepts: ['code-sandboxing', 'execution-safety', 'resource-management'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 55
          },
          {
            id: 'patterns-codeact-a1',
            question: 'How can Code Act patterns be optimized for complex software development tasks?',
            options: [
              'Only use simple scripts',
              'Implement code versioning, dependency management, testing frameworks, and collaborative development workflows',
              'Avoid all complexity',
              'Only use single-line commands'
            ],
            correctAnswer: 1,
            explanation: 'Advanced Code Act patterns can be optimized with code versioning for iteration tracking, dependency management for libraries, testing frameworks for validation, and collaborative workflows for team development.',
            difficulty: 'advanced',
            category: 'agent-patterns',
            subCategory: 'code-act',
            learningObjectives: ['Optimize code act for development', 'Implement advanced code workflows'],
            relatedConcepts: ['code-versioning', 'dependency-management', 'testing-frameworks', 'collaborative-development'],
            persona: ['ai-engineer', 'agent-architect', 'agent-developer'],
            timeEstimate: 70
          }
        ]
      }
    ]
  },
  
  // New category for Agent Security
  {
    id: 'agent-security',
    name: 'Agent Security',
    description: 'Security considerations and best practices for AI agents',
    icon: 'Shield',
    totalQuestions: 20,
    estimatedTime: 15,
    subCategories: [
      {
        id: 'security-fundamentals',
        name: 'Security Fundamentals',
        description: 'Basic security principles for AI agents',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'security-b1',
            question: 'Why is security important in AI agent systems?',
            options: [
              'It\'s not important for AI agents',
              'To protect against prompt injection, data breaches, and unauthorized access',
              'Only for compliance reasons',
              'Only for performance optimization'
            ],
            correctAnswer: 1,
            explanation: 'Security is crucial for AI agents to protect against prompt injection attacks, prevent data breaches, control unauthorized access, and ensure safe operation in production environments.',
            difficulty: 'beginner',
            category: 'agent-security',
            subCategory: 'security-fundamentals',
            learningObjectives: ['Understand agent security importance', 'Recognize security threats'],
            relatedConcepts: ['prompt-injection', 'data-protection', 'access-control'],
            persona: ['business-leader', 'agent-designer', 'ai-ops-engineer'],
            timeEstimate: 35
          },
          {
            id: 'security-i1',
            question: 'What are the main types of security threats to AI agent systems?',
            options: [
              'Only network attacks',
              'Prompt injection, data poisoning, adversarial inputs, and privilege escalation',
              'Only physical security',
              'Only software bugs'
            ],
            correctAnswer: 1,
            explanation: 'AI agent systems face threats including prompt injection (manipulating agent behavior), data poisoning (corrupting training data), adversarial inputs (crafted to fool models), and privilege escalation (gaining unauthorized access).',
            difficulty: 'intermediate',
            category: 'agent-security',
            subCategory: 'security-fundamentals',
            learningObjectives: ['Identify security threats', 'Analyze attack vectors'],
            relatedConcepts: ['prompt-injection', 'data-poisoning', 'adversarial-attacks', 'privilege-escalation'],
            persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
            timeEstimate: 50
          },
          {
            id: 'security-a1',
            question: 'How should enterprise AI agent systems implement defense-in-depth security?',
            options: [
              'Only use firewalls',
              'Implement input validation, output filtering, access controls, monitoring, and incident response',
              'Only use encryption',
              'Only use authentication'
            ],
            correctAnswer: 1,
            explanation: 'Defense-in-depth for AI agents includes input validation to prevent malicious inputs, output filtering to ensure safe responses, access controls for authorization, monitoring for threat detection, and incident response for security events.',
            difficulty: 'advanced',
            category: 'agent-security',
            subCategory: 'security-fundamentals',
            learningObjectives: ['Design comprehensive security', 'Implement security layers'],
            relatedConcepts: ['defense-in-depth', 'input-validation', 'output-filtering', 'security-monitoring'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 60
          }
        ]
      }
    ]
  },
  
  // New category for Agent Ethics
  {
    id: 'agent-ethics',
    name: 'Agent Ethics',
    description: 'Ethical considerations in AI agent development and deployment',
    icon: 'Balance',
    totalQuestions: 15,
    estimatedTime: 12,
    subCategories: [
      {
        id: 'ethical-principles',
        name: 'Ethical Principles',
        description: 'Core ethical principles for AI agents',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'ethics-b1',
            question: 'What are the main ethical considerations for AI agent development?',
            options: [
              'Only technical performance',
              'Fairness, transparency, accountability, and privacy protection',
              'Only cost efficiency',
              'Only speed of development'
            ],
            correctAnswer: 1,
            explanation: 'AI agent ethics involves ensuring fairness (avoiding bias), transparency (explainable decisions), accountability (clear responsibility), and privacy protection (data rights and confidentiality).',
            difficulty: 'beginner',
            category: 'agent-ethics',
            subCategory: 'ethical-principles',
            learningObjectives: ['Understand AI ethics principles', 'Recognize ethical responsibilities'],
            relatedConcepts: ['fairness', 'transparency', 'accountability', 'privacy'],
            persona: ['business-leader', 'agent-designer', 'ai-enthusiast'],
            timeEstimate: 40
          },
          {
            id: 'ethics-i1',
            question: 'How can AI agents be designed to avoid bias and ensure fairness?',
            options: [
              'Ignore bias completely',
              'Use diverse training data, implement bias testing, and regular audits',
              'Only use technical solutions',
              'Only rely on user feedback'
            ],
            correctAnswer: 1,
            explanation: 'Bias prevention requires diverse training data to represent all groups, bias testing to identify unfair outcomes, regular audits to monitor performance across demographics, and inclusive design processes.',
            difficulty: 'intermediate',
            category: 'agent-ethics',
            subCategory: 'ethical-principles',
            learningObjectives: ['Implement bias prevention', 'Design fair AI systems'],
            relatedConcepts: ['bias-testing', 'diverse-data', 'fairness-audits', 'inclusive-design'],
            persona: ['agent-developer', 'ai-engineer', 'agent-designer'],
            timeEstimate: 55
          },
          {
            id: 'ethics-a1',
            question: 'What governance frameworks should organizations implement for ethical AI agent deployment?',
            options: [
              'No governance needed',
              'Ethics committees, impact assessments, monitoring systems, and stakeholder engagement',
              'Only technical reviews',
              'Only legal compliance'
            ],
            correctAnswer: 1,
            explanation: 'Ethical AI governance requires ethics committees for oversight, impact assessments for risk evaluation, monitoring systems for ongoing compliance, and stakeholder engagement for inclusive decision-making.',
            difficulty: 'advanced',
            category: 'agent-ethics',
            subCategory: 'ethical-principles',
            learningObjectives: ['Design ethical governance', 'Implement oversight systems'],
            relatedConcepts: ['ethics-committees', 'impact-assessment', 'ethical-monitoring', 'stakeholder-engagement'],
            persona: ['ai-engineer', 'agent-architect', 'business-leader'],
            timeEstimate: 65
          }
        ]
      }
    ]
  },
  
  // New category for Multi-Agent Systems
  {
    id: 'multi-agent-systems',
    name: 'Multi-Agent Systems',
    description: 'Systems with multiple interacting AI agents',
    icon: 'Users',
    totalQuestions: 18,
    estimatedTime: 15,
    subCategories: [
      {
        id: 'fundamentals',
        name: 'Multi-Agent Fundamentals',
        description: 'Basic concepts of multi-agent systems',
        prerequisites: ['core-concepts'],
        questions: [
          {
            id: 'multi-agent-b1',
            question: 'What is a multi-agent system?',
            options: [
              'A single AI agent',
              'A system where multiple AI agents work together to solve complex problems',
              'A database system',
              'A user interface'
            ],
            correctAnswer: 1,
            explanation: 'A multi-agent system consists of multiple AI agents that work together, each with specialized capabilities, to solve complex problems that are difficult for a single agent to handle.',
            difficulty: 'beginner',
            category: 'multi-agent-systems',
            subCategory: 'fundamentals',
            learningObjectives: ['Define multi-agent systems', 'Understand agent collaboration'],
            relatedConcepts: ['agent-coordination', 'distributed-intelligence', 'collaboration'],
            persona: ['business-leader', 'agent-designer', 'ai-enthusiast'],
            timeEstimate: 30
          },
          {
            id: 'multi-agent-i1',
            question: 'What are the key challenges in multi-agent system design?',
            options: [
              'Only network latency',
              'Coordination, communication, conflict resolution, and resource allocation',
              'Only storage requirements',
              'Only user interface design'
            ],
            correctAnswer: 1,
            explanation: 'Multi-agent systems face challenges in coordination (synchronizing actions), communication (message passing), conflict resolution (handling disagreements), and resource allocation (sharing computational resources).',
            difficulty: 'intermediate',
            category: 'multi-agent-systems',
            subCategory: 'fundamentals',
            learningObjectives: ['Identify multi-agent challenges', 'Understand system complexity'],
            relatedConcepts: ['agent-coordination', 'distributed-systems', 'resource-management'],
            persona: ['agent-developer', 'ai-engineer', 'agent-architect'],
            timeEstimate: 45
          },
          {
            id: 'multi-agent-a1',
            question: 'How can multi-agent systems be architected for fault tolerance and scalability?',
            options: [
              'Use only centralized control',
              'Implement redundancy, load balancing, graceful degradation, and horizontal scaling',
              'Only increase hardware',
              'Only use faster networks'
            ],
            correctAnswer: 1,
            explanation: 'Fault-tolerant multi-agent systems require redundancy (backup agents), load balancing (distributing work), graceful degradation (maintaining partial functionality), and horizontal scaling (adding more agents).',
            difficulty: 'advanced',
            category: 'multi-agent-systems',
            subCategory: 'fundamentals',
            learningObjectives: ['Design scalable multi-agent systems', 'Implement fault tolerance'],
            relatedConcepts: ['fault-tolerance', 'scalability', 'redundancy', 'load-balancing'],
            persona: ['ai-engineer', 'agent-architect', 'ai-ops-engineer'],
            timeEstimate: 70
          }
        ]
      }
    ]
  }
];

// Utility functions for quiz management
export const getQuizzesByPersona = (persona: string, difficulty?: 'beginner' | 'intermediate' | 'advanced') => {
  const allQuestions: QuizQuestion[] = [];
  
  quizCategories.forEach(category => {
    category.subCategories.forEach(subCategory => {
      subCategory.questions.forEach(question => {
        if (question.persona.includes(persona)) {
          if (!difficulty || question.difficulty === difficulty) {
            allQuestions.push(question);
          }
        }
      });
    });
  });
  
  return allQuestions;
};

export const getQuizzesByCategory = (categoryId: string, difficulty?: 'beginner' | 'intermediate' | 'advanced') => {
  const category = quizCategories.find(c => c.id === categoryId);
  if (!category) return [];
  
  const allQuestions: QuizQuestion[] = [];
  category.subCategories.forEach(subCategory => {
    subCategory.questions.forEach(question => {
      if (!difficulty || question.difficulty === difficulty) {
        allQuestions.push(question);
      }
    });
  });
  
  return allQuestions;
};

export const generateAdaptiveQuiz = (persona: string, focusAreas: string[], difficulty: 'beginner' | 'intermediate' | 'advanced', questionCount: number = 10) => {
  const allQuestions = getQuizzesByPersona(persona, difficulty);
  
  // Score questions based on relevance to focus areas
  const scoredQuestions = allQuestions.map(question => ({
    ...question,
    relevanceScore: question.relatedConcepts.filter(concept => 
      focusAreas.some(area => concept.toLowerCase().includes(area.toLowerCase()))
    ).length
  }));
  
  // Sort by relevance and select top questions
  scoredQuestions.sort((a, b) => b.relevanceScore - a.relevanceScore);
  
  return scoredQuestions.slice(0, questionCount);
};

export const calculateQuizScore = (session: QuizSession): number => {
  const totalQuestions = session.questions.length;
  
  // console.log('=== QUIZ SCORING DEBUG ===');
  // console.log('Total questions:', totalQuestions);
  // console.log('Session answers:', session.answers);
  // console.log('Questions:', session.questions.map(q => ({ id: q.id, correctAnswer: q.correctAnswer })));
  
  const correctAnswers = session.questions.filter(question => {
    const selectedAnswer = session.answers[question.id];
    // Ensure both values are numbers for comparison
    const selectedAnswerNum = typeof selectedAnswer === 'string' ? parseInt(selectedAnswer) : selectedAnswer;
    // Both selectedAnswerNum and question.correctAnswer are 0-based
    const isCorrect = selectedAnswerNum !== undefined ? selectedAnswerNum === question.correctAnswer : false;
    
    return isCorrect;
  }).length;
  
  // console.log('Quiz score calculation:', {
  //   totalQuestions,
  //   correctAnswers,
  //   percentage: Math.round((correctAnswers / totalQuestions) * 100)
  // });
  // console.log('=== END QUIZ SCORING DEBUG ===');
  
  return Math.round((correctAnswers / totalQuestions) * 100);
};

export const generateQuizFeedback = (session: QuizSession): QuizFeedback[] => {
  return session.questions.map(question => {
    const selectedAnswer = session.answers[question.id];
    // Ensure both values are numbers for comparison
    const selectedAnswerNum = typeof selectedAnswer === 'string' ? parseInt(selectedAnswer) : selectedAnswer;
    // Both selectedAnswerNum and question.correctAnswer are 0-based
    const isCorrect = selectedAnswerNum !== undefined ? selectedAnswerNum === question.correctAnswer : false;
    
    return {
      questionId: question.id,
      isCorrect,
      selectedAnswer: selectedAnswerNum,
      correctAnswer: question.correctAnswer,
      explanation: question.explanation,
      improvementSuggestions: isCorrect ? [] : [
        `Review the ${question.subCategory} concepts`,
        `Practice with ${question.relatedConcepts.join(', ')} topics`,
        `Consider exploring the ${question.category} section in more detail`
      ]
    };
  });
};

// Business-focused advanced questions
const businessAdvancedQuestions = [
  {
    id: 'business-strategy-a1',
    question: 'What ROI metrics should be tracked when implementing AI agent solutions at enterprise scale?',
    options: [
      'Only cost reduction',
      'Cost reduction, productivity gains, error reduction, customer satisfaction improvement, and time-to-market acceleration',
      'Just employee satisfaction',
      'Only revenue increase'
    ],
    correctAnswer: 1,
    explanation: 'Enterprise AI agent ROI should track multiple metrics: cost reduction, productivity gains, error reduction, customer satisfaction improvement, and time-to-market acceleration for comprehensive value assessment.',
    difficulty: 'advanced',
    category: 'business-strategy',
    subCategory: 'enterprise-implementation',
    learningObjectives: ['Measure AI agent business value'],
    relatedConcepts: ['roi-metrics', 'enterprise-scale', 'productivity-gains', 'customer-satisfaction'],
    persona: ['business-leader', 'ai-ops-engineer'],
    timeEstimate: 55
  },
  {
    id: 'business-strategy-a2',
    question: 'How should organizations approach AI agent governance and risk management?',
    options: [
      'No governance needed',
      'Implement AI ethics committees, establish clear accountability frameworks, monitor bias and fairness, and ensure regulatory compliance',
      'Let IT handle everything',
      'Only worry about technical performance'
    ],
    correctAnswer: 1,
    explanation: 'AI agent governance requires AI ethics committees, clear accountability frameworks, bias and fairness monitoring, and regulatory compliance to ensure responsible deployment.',
    difficulty: 'advanced',
    category: 'business-strategy',
    subCategory: 'governance',
    learningObjectives: ['Understand AI governance'],
    relatedConcepts: ['ai-ethics', 'accountability', 'bias-monitoring', 'regulatory-compliance'],
    persona: ['business-leader'],
    timeEstimate: 50
  }
];

// Designer-focused intermediate and advanced questions
const designerAdvancedQuestions = [
  {
    id: 'design-patterns-i1',
    question: 'What UX principles should guide conversational agent interface design?',
    options: [
      'Make it look like existing software',
      'Design for natural conversation flow, clear intent recognition, graceful error handling, and context preservation',
      'Use as many features as possible',
      'Copy other chatbots exactly'
    ],
    correctAnswer: 1,
    explanation: 'Conversational agent UX should prioritize natural conversation flow, clear intent recognition, graceful error handling, and context preservation for optimal user experience.',
    difficulty: 'intermediate',
    category: 'agent-design',
    subCategory: 'ux-patterns',
    learningObjectives: ['Apply UX principles to agent design'],
    relatedConcepts: ['conversation-flow', 'intent-recognition', 'error-handling', 'context-preservation'],
    persona: ['agent-designer', 'no-code-engineer'],
    timeEstimate: 45
  },
  {
    id: 'design-patterns-a1',
    question: 'How do you design agent workflows that adapt to different user expertise levels?',
    options: [
      'Use the same interface for everyone',
      'Implement progressive disclosure, adaptive complexity, contextual help, and personalized interaction patterns based on user proficiency',
      'Make everything as simple as possible',
      'Always use the most complex interface'
    ],
    correctAnswer: 1,
    explanation: 'Adaptive agent workflows require progressive disclosure, adaptive complexity, contextual help, and personalized interaction patterns that adjust based on user proficiency levels.',
    difficulty: 'advanced',
    category: 'agent-design',
    subCategory: 'adaptive-interfaces',
    learningObjectives: ['Design adaptive agent interfaces'],
    relatedConcepts: ['progressive-disclosure', 'adaptive-complexity', 'contextual-help', 'personalization'],
    persona: ['agent-designer', 'agent-developer'],
    timeEstimate: 55
  }
];

// Developer-focused advanced questions
const developerAdvancedQuestions = [
  {
    id: 'development-a1',
    question: 'What are the key architectural patterns for building resilient multi-agent systems?',
    options: [
      'Use only microservices',
      'Implement circuit breakers, bulkhead isolation, timeout patterns, retry with exponential backoff, and graceful degradation',
      'Just add more servers',
      'Use only monolithic architecture'
    ],
    correctAnswer: 1,
    explanation: 'Resilient multi-agent systems require circuit breakers, bulkhead isolation, timeout patterns, retry with exponential backoff, and graceful degradation to handle failures gracefully.',
    difficulty: 'advanced',
    category: 'agent-development',
    subCategory: 'resilience-patterns',
    learningObjectives: ['Implement resilient agent architectures'],
    relatedConcepts: ['circuit-breakers', 'bulkhead-isolation', 'timeout-patterns', 'exponential-backoff', 'graceful-degradation'],
    persona: ['agent-developer', 'ai-engineer', 'agent-architect'],
    timeEstimate: 60,
    codeExample: `
class ResilientAgentFramework:
    def __init__(self):
        self.circuit_breakers = {}
        self.timeout_config = {'default': 5000, 'critical': 10000}
        self.retry_config = {'max_attempts': 3, 'base_delay': 1000}
    
    async def execute_with_resilience(self, operation, service_name):
        circuit_breaker = self.get_circuit_breaker(service_name)
        
        if circuit_breaker.is_open():
            return await self.fallback_strategy(operation)
        
        try {
            result = await self.execute_with_timeout_and_retry(operation)
            circuit_breaker.record_success()
            return result
        } catch (Exception e) {
            circuit_breaker.record_failure()
            return await self.handle_failure(e, operation)
        }
    }
    
    async def execute_with_timeout_and_retry(self, operation):
        for attempt in range(self.retry_config['max_attempts']):
            try:
                timeout = self.timeout_config.get(operation.type, self.timeout_config['default'])
                return await asyncio.wait_for(operation.execute(), timeout=timeout/1000)
            except asyncio.TimeoutError:
                if attempt == self.retry_config['max_attempts'] - 1:
                    raise
                delay = self.retry_config['base_delay'] * (2 ** attempt)
                await asyncio.sleep(delay / 1000)
    `
  },
  {
    id: 'development-a2',
    question: 'How do you implement proper observability in distributed agent systems?',
    options: [
      'Just use logs',
      'Implement distributed tracing, structured logging, metrics collection, health checks, and correlation IDs across all agent interactions',
      'Use only monitoring dashboards',
      'Observability is not needed'
    ],
    correctAnswer: 1,
    explanation: 'Proper observability in distributed agent systems requires distributed tracing, structured logging, metrics collection, health checks, and correlation IDs to track interactions across the system.',
    difficulty: 'advanced',
    category: 'agent-development',
    subCategory: 'observability',
    learningObjectives: ['Implement agent system observability'],
    relatedConcepts: ['distributed-tracing', 'structured-logging', 'metrics-collection', 'health-checks', 'correlation-ids'],
    persona: ['agent-developer', 'ai-engineer', 'ai-ops-engineer'],
    timeEstimate: 55
  }
];

// Add these questions to the main categories
quizCategories.forEach(category => {
  if (category.id === 'business-strategy') {
    if (!category.subCategories.find(sub => sub.id === 'enterprise-implementation')) {
      category.subCategories.push({
        id: 'enterprise-implementation',
        name: 'Enterprise Implementation',
        description: 'Strategies for implementing AI agents at enterprise scale',
        questions: businessAdvancedQuestions
      });
    }
  }
  
  if (category.id === 'agent-design') {
    if (!category.subCategories.find(sub => sub.id === 'ux-patterns')) {
      category.subCategories.push({
        id: 'ux-patterns',
        name: 'UX Design Patterns',
        description: 'User experience patterns for agent interfaces',
        questions: designerAdvancedQuestions.filter(q => q.category === 'agent-design')
      });
    }
  }
  
  if (category.id === 'agent-development') {
    if (!category.subCategories.find(sub => sub.id === 'resilience-patterns')) {
      category.subCategories.push({
        id: 'resilience-patterns',
        name: 'Resilience Patterns',
        description: 'Patterns for building resilient agent systems',
        questions: developerAdvancedQuestions.filter(q => q.category === 'agent-development')
      });
    }
  }
});
