/**
 * Service Worker for Open Agent School PWA
 * Implements offline-first strategy with Workbox
 */

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Precache assets generated by build
precacheAndRoute(self.__WB_MANIFEST);

// Cache name constants
const CACHE_VERSION = 'v1';
const STATIC_CACHE = `static-${CACHE_VERSION}`;
const API_CACHE = `api-${CACHE_VERSION}`;
const IMAGE_CACHE = `images-${CACHE_VERSION}`;
const FONT_CACHE = `fonts-${CACHE_VERSION}`;

// ========================================
// 1. App Shell - Cache First
// ========================================
registerRoute(
  ({ request }) => request.destination === 'document',
  new NetworkFirst({
    cacheName: STATIC_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
        maxEntries: 50,
      }),
    ],
  })
);

// ========================================
// 2. Static Assets - Cache First
// ========================================
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new CacheFirst({
    cacheName: STATIC_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        maxEntries: 100,
      }),
    ],
  })
);

// ========================================
// 3. Images - Cache First with Expiration
// ========================================
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: IMAGE_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        maxEntries: 60,
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// ========================================
// 4. Fonts - Cache First with Long TTL
// ========================================
registerRoute(
  ({ request }) => request.destination === 'font',
  new CacheFirst({
    cacheName: FONT_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// ========================================
// 5. API Calls - Network First (Stale While Revalidate)
// ========================================
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new StaleWhileRevalidate({
    cacheName: API_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 5 * 60, // 5 minutes
        maxEntries: 50,
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// ========================================
// 6. Concepts API - Stale While Revalidate
// ========================================
registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.includes('/concepts') || url.pathname.includes('/knowledge')),
  new StaleWhileRevalidate({
    cacheName: API_CACHE,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 10 * 60, // 10 minutes
        maxEntries: 100,
      }),
    ],
  })
);

// ========================================
// 7. External APIs - Network First
// ========================================
registerRoute(
  ({ url }) => url.origin !== self.location.origin,
  new NetworkFirst({
    cacheName: 'external-api',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60, // 1 hour
        maxEntries: 30,
      }),
    ],
  })
);

// ========================================
// 8. Offline Fallback
// ========================================
const OFFLINE_PAGE = '/offline.html';
const FALLBACK_IMAGE = '/images/offline-placeholder.svg';

// Cache offline page during install
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(STATIC_CACHE).then((cache) => {
      return cache.addAll([OFFLINE_PAGE, FALLBACK_IMAGE]);
    })
  );
  // Force the waiting service worker to become active
  self.skipWaiting();
});

// Clean up old caches during activation
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((cacheName) => {
            // Delete caches that don't match current version
            return (
              cacheName.startsWith('static-') ||
              cacheName.startsWith('api-') ||
              cacheName.startsWith('images-') ||
              cacheName.startsWith('fonts-')
            ) && !cacheName.includes(CACHE_VERSION);
          })
          .map((cacheName) => caches.delete(cacheName))
      );
    })
  );
  // Take control of all clients immediately
  return self.clients.claim();
});

// Handle offline fallback
self.addEventListener('fetch', (event) => {
  // Only handle navigation requests
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(OFFLINE_PAGE);
      })
    );
  }
  
  // Handle image fallback
  if (event.request.destination === 'image') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(FALLBACK_IMAGE);
      })
    );
  }
});

// ========================================
// 9. Background Sync for Bookmarks
// ========================================
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-bookmarks') {
    event.waitUntil(syncBookmarks());
  }
});

async function syncBookmarks() {
  try {
    const db = await openIndexedDB();
    const pendingBookmarks = await getPendingBookmarks(db);
    
    for (const bookmark of pendingBookmarks) {
      await fetch('/api/v1/bookmarks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(bookmark),
      });
    }
    
    await clearPendingBookmarks(db);
  } catch (error) {
    console.error('Background sync failed:', error);
  }
}

// ========================================
// 10. Push Notifications (Future)
// ========================================
self.addEventListener('push', (event) => {
  const data = event.data.json();
  const title = data.title || 'Open Agent School';
  const options = {
    body: data.body,
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    tag: data.tag || 'default',
    data: data.url || '/',
  };
  
  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  event.waitUntil(
    clients.openWindow(event.notification.data || '/')
  );
});

// ========================================
// Helper Functions
// ========================================
function openIndexedDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('OpenAgentSchoolDB', 1);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains('pendingBookmarks')) {
        db.createObjectStore('pendingBookmarks', { keyPath: 'id', autoIncrement: true });
      }
    };
  });
}

function getPendingBookmarks(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['pendingBookmarks'], 'readonly');
    const store = transaction.objectStore('pendingBookmarks');
    const request = store.getAll();
    
    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
}

function clearPendingBookmarks(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['pendingBookmarks'], 'readwrite');
    const store = transaction.objectStore('pendingBookmarks');
    const request = store.clear();
    
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

console.log('ğŸ”§ Service Worker loaded and ready!');
